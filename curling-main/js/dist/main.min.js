"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _defineProperties(e,t){for(var i=0;i<t.length;i++){var s=t[i];s.enumerable=s.enumerable||!1,s.configurable=!0,"value"in s&&(s.writable=!0),Object.defineProperty(e,s.key,s)}}function _createClass(e,t,i){return t&&_defineProperties(e.prototype,t),i&&_defineProperties(e,i),e}jQuery(document).ready(function(e){jQuery.fn.accordion=function(i){return this.each(function(){var e=jQuery(this),t=e.data("curling.accordion");t||e.hasClass("js-accordion-init")||(t=new s(e,"object"==_typeof(i)&&i),e.addClass("js-accordion-init"),e.data("curling.accordion",t))})};var s=function e(t,i){var s=this;_classCallCheck(this,e),this.accordion=t,this.id=t.data("id"),this.trigger=this.accordion.find('.js-accordion-trigger[data-id="'.concat(this.id,'"]')),this.content=this.accordion.children('.js-accordion-content[data-id="'.concat(this.id,'"]')),this.trigger&&this.trigger.click(function(){s.accordion.toggleClass("active");var e=s.trigger.find('.js-accordion-trigger-text[data-id="'.concat(s.id,'"]'));if(e){var t=e.data("trigger-show"),i=e.data("trigger-hide");s.accordion.hasClass("active")&&i?e.text(i):!s.accordion.hasClass("active")&&t&&e.text(t)}})};jQuery.fn.accordion.Constructor=s}),jQuery(document).ready(function(n){jQuery.fn.curlingNav=function(i){return this.each(function(){var e=jQuery(this),t=e.data("curling.nav");t||e.hasClass("js-curling-nav-init")||(t=new s(e,"object"==_typeof(i)&&i),e.addClass("js-curling-nav-init"),e.data("curling.nav",t))})};var s=function e(t,i){_classCallCheck(this,e),this.element=t,this.menuItems=this.element.find(".nav-menu-primary .menu-item"),this.menuItems.each(function(e,t){var i=n(t),s=i.data("menu"),a=n(".nav-menu-popup[data-name='".concat(s,"']"));i.add(".nav-menu-popup[data-name='".concat(s,"']")).mouseenter(function(){i.addClass("active"),a.addClass("active")}).mouseleave(function(){i.removeClass("active"),a.removeClass("active")})})};jQuery.fn.curlingNav.Constructor=s}),jQuery(document).ready(function(a){jQuery.fn.curlingNavMobile=function(i){return this.each(function(){var e=jQuery(this),t=e.data("curling.mobilenav");t||e.hasClass("js-curling-mobilenav-init")||(t=new s(e,"object"==_typeof(i)&&i),e.addClass("js-curling-mobilenav-init"),e.data("curling.mobilenav",t))})};var s=function(){function i(e,t){var s=this;_classCallCheck(this,i),this.element=e,this.topMenu=this.element.find(".js-cta-topmenu-mobile"),this.hamburger=this.element.find(".js-cta-menu-mobile-hamburger"),this.menuLists=this.element.find(".js-cta-menu-list-mobile"),this.popouts=this.element.find(".js-cta-popout-mobile"),this.navTitle=this.element.find(".js-nav-title-mobile"),this.navTitle&&this.navTitle.click(function(){s.topMenu.toggleClass("active"),s.topMenu.hasClass("active")?(s.hidePopupsMobile(),s.showPopupMobile(0)):s.hidePopupsMobile()}),this.hamburger.click(function(){s.topMenu.toggleClass("active"),s.topMenu.hasClass("active")?(s.hidePopupsMobile(),s.showPopupMobile(0)):s.hidePopupsMobile()}),this.menuLists.each(function(e,t){var i=a(t);i.find(".js-cta-menu-item-mobile").click(function(){var e=i.data("link");i.hasClass("active")?e&&(window.location=e):(s.hideMenusMobile(),i.toggleClass("active"))})}),this.menuLists.each(function(e,t){a(t).find(".js-cta-menu-subitem-mobile").click(function(e){var t=a(e.currentTarget).data("id");s.hidePopupsMobile(),s.showPopupMobile(t)||s.topMenu.removeClass("active")})}),this.popouts.each(function(e,t){var i=a(t);i.find(".js-cta-subnav-back").click(function(e){a(e.currentTarget);var t=i.data("parent");s.hidePopupsMobile(),s.showPopupMobile(t)})})}return _createClass(i,[{key:"showPopupMobile",value:function(e){var t=this.element.find('.js-cta-popout-mobile[data-id="'+e+'"]');return 0<t.length&&(t.addClass("active"),!0)}},{key:"hidePopupsMobile",value:function(){a(".js-cta-popout-mobile").each(function(e,t){a(t).removeClass("active")})}},{key:"hideMenusMobile",value:function(){a(".js-cta-menu-list-mobile").each(function(e,t){a(t).removeClass("active")})}}]),i}();jQuery.fn.curlingNavMobile.Constructor=s}),jQuery(document).ready(function(s){jQuery.fn.imageCarousel=function(i){return this.each(function(){var e=jQuery(this),t=e.data("image.carousel");t||e.hasClass("js-image-carousel-init")||(t=new a(e,"object"==_typeof(i)&&i),e.addClass("js-image-carousel-init"),e.data("image.carousel",t))})};var a=function(){function i(e,t){_classCallCheck(this,i),this.element=e,this.sliderFeatured=this.element.find(".js-slider-featured"),this.slider=this.element.find(".js-slider"),this.sliderFeatured&&this.initFeatured(),this.slider&&this.initNormal()}return _createClass(i,[{key:"initNormal",value:function(){var n=this;this.sliderMobile=this.element.find(".js-slider-mobile"),this.isCircular=this.slider.hasClass("js-slider-circular"),this.navMobile=this.element.find(".js-carousel-mobile-nav"),this.paginationMobile=this.element.find(".js-carousel-mobile-nav-pagination"),this.arrowPrevMobile=this.element.find(".js-carousel-mobile-nav-prev"),this.arrowNextMobile=this.element.find(".js-carousel-mobile-nav-next"),this.nav=this.element.find(".js-carousel-nav"),this.pagination=this.element.find(".js-carousel-nav-pagination"),this.arrowPrev=this.element.find(".js-carousel-nav-prev"),this.arrowNext=this.element.find(".js-carousel-nav-next"),this.pagination&&this.slider.on("init reInit beforeChange",function(e,t,i,s){n.slider.find(".slick-slide").removeClass("level1 level2 level3"),s||(n.slider.find('.slick-slide[data-slick-index="0"]').addClass("level3"),n.slider.find('.slick-slide[data-slick-index="1"]').addClass("level2"));var a=(s||0)+1;n.pagination.text(a+"/"+t.slideCount)}),this.paginationMobile&&this.sliderMobile.on("init reInit beforeChange",function(e,t,i,s){var a=(s||0)+1;n.paginationMobile.text("IMAGE "+a+" OF "+t.slideCount)}),this.navMobile&&this.sliderMobile.children().length<=1&&this.navMobile.addClass("hidden"),this.nav&&this.slider.children().length<=1&&this.nav.addClass("hidden"),this.carouselMobile=this.sliderMobile.slick(),this.carousel=this.slider.slick({centerMode:this.isCircular,slidesToShow:this.isCircular?3:1,slidesToScroll:1,centerPadding:0,infinite:!this.isCircular}),this.carouselMobile&&this.arrowPrevMobile&&this.arrowPrevMobile.click(function(){n.sliderMobile.slick("slickPrev")}),this.carouselMobile&&this.arrowNextMobile&&this.arrowNextMobile.click(function(){n.sliderMobile.slick("slickNext")}),this.carousel&&this.arrowPrev&&this.arrowPrev.click(function(){n.slider.slick("slickPrev")}),this.carousel&&this.arrowNext&&this.arrowNext.click(function(){n.slider.slick("slickNext")})}},{key:"initFeatured",value:function(){var i=this;this.sliderFeatured.each(function(e,t){s(t).masterslider({width:767,height:488,layout:"partialview",space:0,loop:!0,view:"wave",controls:{arrows:{autohide:!1}}}),i.masterSlider=i.sliderFeatured.masterslider("slider"),i.masterSlider.api.addEventListener(MSSliderEvent.CHANGE_START,function(){var e=i.masterSlider.api.view.currentSlide.index+1,t=i.masterSlider.api.view.slideList.length;i.pagination.text(e+"/"+t),i.paginationMobile.text("IMAGE "+e+" OF "+t)})})}},{key:"addAll",value:function(e,t,i){this.slider.find('.slick-slide[data-slick-index="'+t+'"]').addClass(i)}}]),i}();jQuery.fn.imageCarousel.Constructor=a}),jQuery(document).ready(function(s){jQuery.fn.heroCarousel=function(i){return this.each(function(){var e=jQuery(this),t=e.data("hero.carousel");t||e.hasClass("js-hero-carousel-init")||(t=new a(e,"object"==_typeof(i)&&i),e.addClass("js-hero-carousel-init"),e.data("hero.carousel",t))})};var a=function(){function i(e,t){_classCallCheck(this,i),this.element=e,this.slider=this.element.find(".js-slider"),this.init()}return _createClass(i,[{key:"pause",value:function(){this.masterSlider.api.pause()}},{key:"resume",value:function(){this.masterSlider.api.resume()}},{key:"init",value:function(){var i=this;this.slider.each(function(e,t){s(t).masterslider({width:1440,height:700,layout:"fullwidth",space:0,loop:!0,grabCursor:!1,mouse:!1,view:"fade",fillMode:"cover",autoplay:!0,slideshowDelay:7,overPause:!1,pauseOnHover:!1,controls:{thumblist:{margin:0,space:30,autohide:!1,dir:"h",align:"bottom",width:370,height:140,arrows:!1,type:"tabs"}}}),i.masterSlider=i.slider.masterslider("slider"),i.isStarted=!1,i.masterSlider.api.addEventListener(MSSliderEvent.CHANGE_START,function(){var e=i.slider.find(".ms-thumbs-cont .ms-thumb-frame").eq(i.masterSlider.api.view.currentSlide.index).find(".js-hero-carousel-thumbnail-timer-progress");e.addClass("initializing"),e.removeClass("deinitializing"),i.isStarted=!0}),i.masterSlider.api.addEventListener(MSSliderEvent.CHANGE_END,function(){i.slider.find(".ms-thumbs-cont .ms-thumb-frame").eq(i.masterSlider.api.view.currentSlide.index).find(".js-hero-carousel-thumbnail-timer-progress").removeClass("initializing")}),i.masterSlider.api.addEventListener(MSSliderEvent.WAITING,function(){var e=i.slider.find(".ms-thumbs-cont .ms-thumb-frame").eq(i.masterSlider.api.view.currentSlide.index).find(".js-hero-carousel-thumbnail-timer-progress"),t=(i.masterSlider.api.view.currentSlide.index,i.masterSlider.api.currentTime());i.isStarted?(e.css("width",t+"%"),e.addClass("in-progress")):0!==t||i.isStarted?e.css("width",t+"%"):(e.css("width","100%"),e.removeClass("in-progress"),e.addClass("deinitializing")),i.isStarted&&(i.isStarted=!1)})})}}]),i}();jQuery.fn.heroCarousel.Constructor=a}),jQuery(document).ready(function(e){jQuery.fn.mediaPlayer=function(i){return this.each(function(){var e=jQuery(this),t=e.data("media.player");t||e.hasClass("js-hero-container-init")||(t=new s(e,"object"==_typeof(i)&&i),e.addClass("js-hero-container-init"),e.data("media.player",t))})};var s=function e(t,i){var s=this;_classCallCheck(this,e),this.mediaPlayer=t,this.videoPlayer=this.mediaPlayer.find(".js-video-player"),this.videoBtnPlay=this.videoPlayer.find(".js-btn-play"),this.video=this.videoPlayer.find(".js-video"),this.videoOverlay=this.videoPlayer.find(".js-video-overlay"),this.content=this.mediaPlayer.find(".js-hero-content"),this.videoOverlay&&!this.videoOverlay.hasClass("hidden")&&this.videoOverlay.addClass("hidden"),0<this.video.length?this.video=this.video[0]:this.video=null,this.videoPlayer&&this.video&&this.videoPlayer.click(function(){s.video.paused?(s.video.play(),s.videoBtnPlay&&s.videoBtnPlay.addClass("hidden"),s.videoOverlay&&s.videoOverlay.addClass("hidden"),s.content&&s.content.addClass("hidden")):(s.video.pause(),s.videoBtnPlay&&s.videoBtnPlay.removeClass("hidden"),s.videoOverlay&&s.videoOverlay.removeClass("hidden"),s.content&&s.content.removeClass("hidden"))})};jQuery.fn.mediaPlayer.Constructor=s}),jQuery(document).ready(function(b){jQuery.fn.newsFeed=function(i){return this.each(function(){var e=jQuery(this),t=e.data("news.feed");t||e.hasClass("js-news-feed-init")||(t=new s(e,"object"==_typeof(i)&&i),e.addClass("js-news-feed-init"),e.data("news.feed",t))})};var s=function(){function i(e,t){_classCallCheck(this,i),this.element=e,this.newsFeedItems=this.element.find(".js-news-feed-items"),this.additionalOptions=this.newsFeedItems.data("options"),this.page=1,this.n=4,this.total=1,console.log(this.additionalOptions),"noinitial"!=this.additionalOptions?this.getAjaxRequest(this.page,this.n):(this.leftArrow=this.newsFeedItems.data("arrow-left"),this.rightArrow=this.newsFeedItems.data("arrow-right"),this.total=this.newsFeedItems.data("total"),this.addPagination(1,this.total,{arrowImageLeft:this.leftArrow,arrowImageRight:this.rightArrow}))}return _createClass(i,[{key:"getAjaxRequest",value:function(t,i){var s=this,e=this.element.data("category");e&&b.ajax({type:"POST",url:curling_ajax.ajax_url,data:{action:"ajax_news_request",page:t,n:i,category:e},dataType:"json",success:function(e){console.log(e),e&&e.success&&e.posts&&e.page&&e.total&&(s.page=t,s.n=i,s.total=e.total,s.newsFeedItems&&s.newsFeedItems.empty(),s.addPosts(e.posts,e),s.addPagination(e.page,e.total,e))}})}},{key:"addPosts",value:function(e,t){if(this.newsFeedItems)for(var i=0;i<e.length;++i){var s=e[i],a=b("<section>",{class:"news-feed-item block-news-promo block-news-promo-white"}),n=b("<div>",{class:"news-promo-container news-feed-container "+(i%2==1?"news-feed-reversed-container":"")}),r=b("<div>",{class:"news-feed-thumbnail-container news-promo-thumbnail-container"});if(s.thumbnail){var o=b("<img>",{class:"news-feed-thumbnail",src:s.thumbnail,alt:""});if(r.append(o),s.caption){var l=b("<div>",{class:"news-feed-caption-container news-promo-caption-container"}),d=b("<div>",{class:"news-promo-caption-wrapper"}),c=b("<p>",{class:"news-promo-caption"}).text(s.caption);d.append(c),l.append(d),r.append(l)}}n.append(r);var u=b("<div>",{class:"news-feed-info news-promo-info"}),h=b("<h3>",{class:"news-promo-title"}).text(s.title?s.title:""),p=b("<h4>",{class:"news-promo-date"}).text(s.date?s.date:""),v=b("<p>",{class:"news-feed-excerpt news-promo-excerpt"}).text(s.excerpt?s.excerpt:""),f=b("<a>",{class:"news-feed-link news-promo-link btn-link",href:s.link}),m=b("<h4>",{class:"btn-link-text red",href:""}).text("Continue Reading"),g=b("<img>",{class:"btn-link-arrow",src:t.arrowImageRed,alt:"arrow-right"}).text("Continue Reading");u.append(h),u.append(p),u.append(v),f.append(m),f.append(g),u.append(f),n.append(u),a.append(n),this.newsFeedItems.append(a)}}},{key:"addPagination",value:function(e,t,a){var n=this;if(1!==e||1!==t){for(var r=[],i=!1,s=!1,o=1===e||e===t?2:1,l=1;l<t+1;++l)Math.abs(l-e)<=o?r.push({isCurrent:l===e,text:l,large:!1}):l<e&&!i?(1<e-o&&r.push({isCurrent:!1,text:"arrow-left",large:!1}),r.push({isCurrent:!1,text:"PREV",large:!0}),i=!0):e<l&&!s&&(r.push({isCurrent:!1,text:"NEXT",large:!0}),s=!0,e+o<t&&r.push({isCurrent:!1,text:"arrow-right",large:!1}));for(var d=b("<div>",{class:"news-feed-pagination"}),c=function(e){var t=r[e],i=b("<div>",{class:"news-feed-pagination-block"+(t.isCurrent?" news-feed-pagination-block-selected":"")+(t.large?" news-feed-pagination-block-large":"")}),s=void 0;s="arrow-left"===t.text?b("<img>",{src:a.arrowImageLeft,alt:"arrow-left"}):"arrow-right"===t.text?b("<img>",{src:a.arrowImageRight,alt:"arrow-right"}):b("<span>",{class:"news-feed-pagination-text",src:a.arrowImageRight,alt:"arrow-right"}).text(t.text),i.click(function(){var e=n.page;switch(t.text){case"NEXT":e++;break;case"PREV":e--;break;case"arrow-left":e=1;break;case"arrow-right":e=n.total;break;default:e=t.text}n.getAjaxRequest(e,n.n)}),i.append(s),d.append(i)},u=0;u<r.length;++u)c(u);this.newsFeedItems.append(d)}}}]),i}();jQuery.fn.newsFeed.Constructor=s}),jQuery(document).ready(function(h){jQuery.fn.eventsFeed=function(i){return this.each(function(){var e=jQuery(this),t=e.data("events.feed");t||e.hasClass("js-events-feed-init")||(t=new s(e,"object"==_typeof(i)&&i),e.addClass("js-events-feed-init"),e.data("events.feed",t))})};var s=function(){function i(e,t){_classCallCheck(this,i),this.element=e,this.eventsFeedItems=this.element.find(".js-events-feed-items"),this.page=1,this.n=4,this.total=1,this.getAjaxRequest(this.page,this.n)}return _createClass(i,[{key:"getAjaxRequest",value:function(t,i){var s=this;this.element.data("category")&&h.ajax({type:"POST",url:curling_ajax.ajax_url,data:{action:"ajax_events_request",page:t,n:i},dataType:"json",success:function(e){e&&e.success&&e.events&&e.page&&e.total&&(s.page=t,s.n=i,s.total=e.total,s.eventsFeedItems&&s.eventsFeedItems.empty(),s.addPosts(e.events),s.addPagination(e.page,e.total,e))}})}},{key:"addPosts",value:function(e){if(this.eventsFeedItems){for(var t=h("<div>",{class:"block-event-wrapper"}),i=0;i<e.length;++i){var s=e[i],a=h("<div>",{class:"block-event-feed-item-wrapper"}),n=h("<div>",{class:"block-event-info block-event-info-row"}),r=h("<div>",{class:"event-info-top-container"});s.event_logo&&r.append(h("<img>",{class:"event-info-top-image",src:s.event_logo,alt:"Event Logo"})),n.append(r);var o=h("<div>",{class:"block-event-info-details gray"}),l=h("<div>",{class:"block-event-info-detail-top-container"});s.name&&l.append(h("<h3>",{class:"block-event-sponsor-header"}).text(s.name)),s.operated_by&&l.append(h("<h3>",{class:"block-event-sponsor-operated-by"}).text("Operated by ".concat(s.operated_by))),s.date&&l.append(h("<h4>",{class:"block-event-sponsor-date"}).text(s.date)),s.location&&l.append(h("<h4>",{class:"block-event-sponsor-location"}).text(s.location)),o.append(l);var d=h("<div>",{class:"event-info-bottom-container"});s.buy_tickets_link&&d.append(h("<a>",{class:"block-event-sponsor-tickets-btn btn btn-red",href:s.buy_tickets_link,target:"blank"}).text("Buy Tickets"));var c=h("<div>",{class:"block-event-sponsor-links-container"});s.event_page_link&&c.append(h("<a>",{class:"block-event-sponsor-link subdomain red arrow-right-large-red",href:s.event_page_link,target:"blank"}).text("More Information")),s.draw_schedule_link&&c.append(h("<a>",{class:"block-event-sponsor-link subdomain red arrow-right-large-red",href:s.draw_schedule_link,target:"blank"}).text("Event Schedule")),s.meet_the_teams_link&&c.append(h("<a>",{class:"block-event-sponsor-link subdomain red arrow-right-large-red",href:s.meet_the_teams_link,target:"blank"}).text("Meet the teams")),d.append(c),o.append(d),n.append(o),a.append(n),t.append(a)}this.eventsFeedItems.append(t)}}},{key:"addPagination",value:function(e,t,a){var n=this;if(1!==e||1!==t){for(var r=[],i=!1,s=!1,o=1===e||e===t?2:1,l=1;l<t+1;++l)Math.abs(l-e)<=o?r.push({isCurrent:l===e,text:l,large:!1}):l<e&&!i?(1<e-o&&r.push({isCurrent:!1,text:"arrow-left",large:!1}),r.push({isCurrent:!1,text:"PREV",large:!0}),i=!0):e<l&&!s&&(r.push({isCurrent:!1,text:"NEXT",large:!0}),s=!0,e+o<t&&r.push({isCurrent:!1,text:"arrow-right",large:!1}));for(var d=h("<div>",{class:"events-feed-pagination"}),c=function(e){var t=r[e],i=h("<div>",{class:"events-feed-pagination-block"+(t.isCurrent?" events-feed-pagination-block-selected":"")+(t.large?" events-feed-pagination-block-large":"")}),s=void 0;s="arrow-left"===t.text?h("<img>",{src:a.arrowImageLeft,alt:"arrow-left"}):"arrow-right"===t.text?h("<img>",{src:a.arrowImageRight,alt:"arrow-right"}):h("<span>",{class:"events-feed-pagination-text",src:a.arrowImageRight,alt:"arrow-right"}).text(t.text),i.click(function(){var e=n.page;switch(t.text){case"NEXT":e++;break;case"PREV":e--;break;case"arrow-left":e=1;break;case"arrow-right":e=n.total;break;default:e=t.text}n.getAjaxRequest(e,n.n)}),i.append(s),d.append(i)},u=0;u<r.length;++u)c(u);this.eventsFeedItems.append(d)}}}]),i}();jQuery.fn.eventsFeed.Constructor=s}),jQuery(document).ready(function(o){jQuery.fn.scheduleLinks=function(i){return this.each(function(){var e=jQuery(this),t=e.data("schedule.links");t||e.hasClass("js-schedule-links-init")||(t=new s(e,"object"==_typeof(i)&&i),e.addClass("js-schedule-links-init"),e.data("schedule.links",t))})};var s=function e(t,i){var n=this;_classCallCheck(this,e),this.element=t,this.links=[],o("body").find(".js-schedule").each(function(e,t){var i=o(t),s=i.find(".js-schedule-title").text(),a="draw-schedule-"+e;i.attr("id",a),n.links.push({id:"#"+a,title:s})});for(var s=0;s<this.links.length;++s){var a=this.links[s],r=o("<a>",{class:"schedule-link-item clear",href:a.id}).append(o("<p>",{class:"schedule-link-text inverted"}).text(a.title));this.element.append(r)}};jQuery.fn.scheduleLinks.Constructor=s}),jQuery(document).ready(function(e){if(0<e(".wpgmza_map").length){e(".wpgmza_sl_query_div").append("<div class='map-switcher'><p class='listview-button selected'>List View</p><p class='mapview-button'>Map View</p></div>"),e(".listview-button").click(function(){e(this).hasClass("selected")||(e(this).addClass("selected"),e(".mapview-button").removeClass("selected"),e(".wpgmza_map").removeClass("map-reveal"),e(".wpgmza_marker_holder").show())}),e(".mapview-button").click(function(){e(this).hasClass("selected")||(e(this).addClass("selected"),e(".listview-button").removeClass("selected"),e(".wpgmza_marker_holder").hide(),e(".wpgmza_map").addClass("map-reveal"))})}}),jQuery(document).ready(function(e){e.fn.blockHeroTimer=function(i){return this.each(function(){var e=jQuery(this),t=e.data("curling.block-hero-timer");t||e.hasClass("js-block-hero-timer-init")||(t=new s(e,"object"==_typeof(i)&&i),e.data("curling.block-hero-timer",t))})};var s=function(){function r(e,t){var i=this;_classCallCheck(this,r),this.element=e;var s=this.element.data("date"),a=new Date,n=new Date(1e3*s);0<n-a&&(this.updateTime(n),window.setInterval(function(){i.updateTime(n)},1e3))}return _createClass(r,[{key:"updateTime",value:function(e){var t=(e-new Date)/1e3,i=Math.floor(t/86400),s=Math.floor((t-86400*i)/3600),a=Math.floor((t-86400*i-3600*s)/60),n=Math.floor(t-86400*i-3600*s-60*a);this.element.find(".js-days").text(i),this.element.find(".js-hours").text(s),this.element.find(".js-minutes").text(a),this.element.find(".js-seconds").text(n)}},{key:"inDays",value:function(e,t){var i=t.getTime(),s=e.getTime();return parseInt((i-s)/864e5)}},{key:"inWeeks",value:function(e,t){var i=t.getTime(),s=e.getTime();return parseInt((i-s)/6048e5)}},{key:"inMonths",value:function(e,t){var i=e.getFullYear(),s=t.getFullYear(),a=e.getMonth();return t.getMonth()+12*s-(a+12*i)}},{key:"inYears",value:function(e,t){return t.getFullYear()-e.getFullYear()}}]),r}();jQuery.fn.blockHeroTimer.Constructor=s}),jQuery(document).ready(function(e){0<e("section.ctrs-container").length&&e(".ctrs-menu ").click(function(){0==e(this).hasClass("selected")&&(e(".ctrs-menu.selected").removeClass("selected"),e(this).addClass("selected"),e(this).hasClass("ctrs-menu-standings")?(e(".ctrs-standings").removeClass("hide"),e(".ctrs-doubles").addClass("hide"),e(".ctrs-cup").addClass("hide"),e(".ctrs-main-title").removeClass("hide")):e(this).hasClass("ctrs-menu-doubles")?(e(".ctrs-doubles").removeClass("hide"),e(".ctrs-standings").addClass("hide"),e(".ctrs-cup").addClass("hide"),e(".ctrs-main-title").addClass("hide")):e(this).hasClass("ctrs-menu-cup")&&(e(".ctrs-cup").removeClass("hide"),e(".ctrs-standings").addClass("hide"),e(".ctrs-doubles").addClass("hide"),e(".ctrs-main-title").addClass("hide")))})}),jQuery(document).ready(function(t){0<t(".search-menu-link").length&&t(".search-menu-link").click(function(e){e.preventDefault(),t(".search-bar").removeClass("hide"),t(".search-menu").addClass("hide"),t(".search-bar .orig").focus()})}),jQuery(document).ready(function(e){e(".trigger-subnav-links").click(function(){console.log("Trigger Subnavs"),0<e(".sidebar-list.sidebar-collapsed").length?e(".sidebar-list.sidebar-collapsed").each(function(){e(this).removeClass("sidebar-collapsed"),e(this).addClass("sidebar-expanded")}):0<e(".sidebar-list.sidebar-expanded").length&&e(".sidebar-list.sidebar-expanded").each(function(){e(this).removeClass("sidebar-expanded"),e(this).addClass("sidebar-collapsed")})})}),jQuery(document).ready(function(i){function e(e,t){var i=e(".text-callouts-group.slick-initialized");t<1170&&0===i.length?e(".text-callouts-group").slick({slidesToShow:1,slidesToScroll:1,speed:500,fade:!0,cssEase:"linear",dots:!0,centerMode:!0}):1170<=t&&0<i.length&&e(".text-callouts-group").slick("unslick")}i(".js-curling-nav").curlingNav(),i(".js-curling-nav-mobile").curlingNavMobile(),i(".js-hero-container").mediaPlayer(),i(".js-timer").blockHeroTimer(),i(".js-image-carousel").imageCarousel(),i(".js-hero-carousel").heroCarousel(),i(".js-news-feed").newsFeed(),i(".js-events-feed").eventsFeed(),i(".js-schedule-links").scheduleLinks(),i(".js-accordion").accordion(),i(".js-slick").slick({slidesToShow:1,slidesToScroll:1,speed:500,cssEase:"linear",dots:!0}),i(document).on("lity:close",function(e,t){i(".js-hero-carousel").each(function(e,t){i(t).data("hero.carousel").resume()})}),i(document).on("lity:open",function(e,t){i(".js-hero-carousel").each(function(e,t){i(t).data("hero.carousel").pause()})}),e(i,i(window).width()),i(window).on("resize",function(){e(i,i(window).width())})});

//# sourceMappingURL=data:application/json;charset=utf8;base64,
